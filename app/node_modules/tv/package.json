{
  "name": "tv",
  "description": "Interactive debug console plugin for hapi",
  "version": "4.1.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/tv"
  },
  "main": "lib/index.js",
  "keywords": [
    "debug",
    "console",
    "hapi",
    "plugin"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "backbone": "1.2.x",
    "bootstrap": "3.3.x",
    "chance": "0.7.x",
    "handlebars": "4.0.x",
    "hbsfy": "2.2.x",
    "hoek": "2.x.x",
    "jquery": "2.1.x",
    "json-markup": "0.1.x",
    "lodash": "3.10.x",
    "moment": "2.10.x",
    "ws": "0.8.x",
    "zeroclipboard": "2.2.x"
  },
  "peerDependencies": {
    "hapi": ">=9.x.x",
    "inert": ">=3.x.x",
    "vision": ">=3.x.x"
  },
  "devDependencies": {
    "browserify": "11.0.x",
    "browserify-istanbul": "0.2.x",
    "chai": "3.2.x",
    "chai-jquery": "2.0.x",
    "code": "1.x.x",
    "es5-shim": "4.1.x",
    "hapi": "10.x.x",
    "inert": "3.x.x",
    "istanbul": "0.3.x",
    "lab": "5.x.x",
    "mocha": "2.2.x",
    "mocha-phantomjs": "3.6.x",
    "node-sass": "3.3.x",
    "onchange": "2.0.x",
    "phantomjs": "1.9.7-15",
    "sinon": "1.15.x",
    "sinon-chai": "2.8.x",
    "watchify": "3.3.x",
    "vision": "3.x.x"
  },
  "scripts": {
    "test": "mocha-phantomjs test/client/index.html --hooks test/client/phantomHooks.js && lab test/index.js -a code -t 100 -L",
    "test-client-cov": "npm run build-test && npm run test && istanbul report --root coverage lcov",
    "watch-js": "watchify -t hbsfy -e source/js/app.js source/js/**/*.js -o public/js/main.js -d -v",
    "watch-test": "watchify -t hbsfy -e test/client/main.js test/client/**/*.js -o test/bundle.js -d -v",
    "watch-styles": "node-sass source/styles/style.scss public/css/style.css -w source/styles -r",
    "watch": "npm run build && npm run watch-js & npm run watch-test & npm run watch-styles & npm run post-js",
    "copy-fonts": "cp -R source/fonts/vendor/bootstrap/** public/fonts",
    "copy-assets": "cp -R vendor/ZeroClipboard.swf public/js",
    "build-js": "browserify -t hbsfy -e source/js/app.js source/js/**/*.js > public/js/main.js -d",
    "build-test": "browserify -t hbsfy -t [ browserify-istanbul --ignore **/*.hbs ] test/client/main.js -o test/bundle.js",
    "build-styles": "node-sass source/styles/style.scss public/css/style.css",
    "build": "npm run build-js && npm run build-styles && npm run build-test && npm run copy-fonts && npm run copy-assets",
    "boot": "node examples/simple.js",
    "start": "npm run build && npm run boot",
    "start-dev": "npm run watch & npm run boot",
    "post-js": "onchange test/bundle.js -- npm run test",
    "prepublish": "npm run build"
  },
  "license": "BSD-3-Clause",
  "readme": "![tv Logo](https://raw.github.com/hapijs/tv/master/images/tv.png)\n\nTV is an interactive debug console plugin for [**hapi**](https://github.com/hapijs/hapi)\n\n[![Build Status](https://secure.travis-ci.org/hapijs/tv.png)](http://travis-ci.org/hapijs/tv)\n\nLead Maintainer: [Oscar A. Funes Martinez](https://github.com/osukaa)\n\nTV is a simple web page in which developers can view server logs for their requests. Optionally, they can also filter the server logs to just their requests by attaching a unique client id to each request. The server will use WebSocket to stream the logs to the web application in real-time. \n\nHere's what it looks like in action:\n\n![TV interactive debug console](https://raw.github.com/hapijs/tv/master/images/tv-screenshot.png)\n\n### Using TV in Your Application\n\nTo enable TV in a **hapi** application, install **tv** and register it.  Below is an example of registering the **tv** plugin:\n\n```javascript\nvar Hapi = require('hapi');\nvar Tv = require('tv');\n\nvar server = new Hapi.Server();\n\nserver.register(Tv, function (err) {\n\n    if (!err) {\n        server.start();\n    }\n});\n```\n\nIn applications using multiple server instances, only one server can enable the debug interface using the default port.\n\n\n### Options\n\nBelow are the options available to be passed into the **tv** plugin:\n\n- `host` - the hostname, IP address, or path to UNIX domain socket the WebSocket connection is bound to. Defaults to _undefined_ and therefore `0.0.0.0`\n   which means any available network interface(see hapi `new Server()`).\n- `port` - the port used by the WebSocket connection. Defaults to _0_ and therefore an ephemeral port (see hapi `new Server()`).\n- `endpoint` - the debug console request path added to the server routes. Defaults to _'/debug/console'_.\n- `queryKey` - the name or the request query parameter used to mark requests being debugged. Defaults to _debug_.\n- `template` - the name of the template to use for the debug console.  Defaults to _index_.\n- `authenticateEndpoint` - set this to true to use auth schemes for TVs main- and file delivering routes (defaults to false)\n\nBelow is an example of registering the tv plugin with some options:\n\n```javascript\nvar options = {endpoint: '/awesome'};\n\nserver.register({register: Tv, options: options}, function (err) {\n    ...\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/tv/issues"
  },
  "_id": "tv@4.1.2",
  "dist": {
    "shasum": "cfa38da21749e14094c0d5d5c79b5aac8b355d03"
  },
  "_from": "tv@",
  "_resolved": "https://registry.npmjs.org/tv/-/tv-4.1.2.tgz"
}
