{
  "name": "gate-executor",
  "version": "0.2.3",
  "description": "Execute functions that return via callback in order, but pause if a function is marked as a gate.",
  "main": "gate-executor.js",
  "scripts": {
    "test": "./test.sh",
    "build": "./build.sh"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rjrodger/gate-executor.git"
  },
  "keywords": [
    "gate",
    "executor"
  ],
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/rjrodger/gate-executor/issues"
  },
  "homepage": "https://github.com/rjrodger/gate-executor",
  "dependencies": {
    "lodash": "2.4.2",
    "async": "0.9.2",
    "eraro": "0.4.1"
  },
  "contributors": [
    {
      "name": "Jacob Pruitt",
      "url": "http://javascriptjake.com"
    }
  ],
  "readme": "# gate-executor\n\n#### Execute functions that return via callback in order, but pause if a function is marked as a gate.\n\nCurrent Version: 0.2.3\n\nTested on: Node 0.10, 0.11, 0.12, iojs.\n\n[![Build Status](https://travis-ci.org/rjrodger/gate-executor.png?branch=master)](https://travis-ci.org/rjrodger/gate-executor)\n\n[Annotated Source](http://rjrodger.github.io/gate-executor/doc/gate-executor.html)\n\nA work execution queue that provides tracing and gating. Work\nfunctions can have optional callbacks. Timeouts are triggered when\nexecution does not complete within a specified time.\n\nGating places execution into a serial mode, where all gated work\nfunctions must complete in order before other work functions in the\nqueue are called. The gate can be ignored.\n\nUsed by [Seneca](http://senecajs.org/) micro-service communication to\nexecute tasks in order. If you haven't heard about Seneca, check out\nthe [getting started guide](http://senecajs.org/getting-started.html).\n\n\n# Support\n\nIf you're using this module, feel free to contact me on twitter if you\nhave any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/gate-executor.png)](https://gitter.im/rjrodger/gate-executor)\n\n\n# Usage\n\nThe gate executor provides functionality to pause gated tasks and to\nquit tasks that exceed a given timeout. The executor can be created\nwith a few options:\n\n```JavaScript\nvar e0 = executor({\n  trace: true,              // Error logging trace, default false\n  timeout: 150,             // Timout for tasks, default 3333\n  error: function() {...},  // A function to wrap all errors in, default noop\n  stubs: {\t\t    // Stubs to substitute default node functions\n    now: {...},\n    setTimeout: {...},\n    clearTimeout: {...}\n  }\n})\n```\n\nWhen calling the executor with a task, use the following pattern:\n```JavaScript\ne0.execute({\n  id: 'a',              // Optional identifier for trace\n  fn: function() {...}  // Function to be preformed\n  cb: function(err, out) {...}\n})\n```\n\n# Worker definition\n\nThe worker definition object has the following properties:\n\n   * _id_:     an identifier string for the worker.\n   * _desc_:   a description string for the worker.\n   * _fn_:     the worker function itself; it should accept one argument, a completion callback, which must be called (this in turn then calls the task callback, if any).\n   * _cb_:     optional callback function, of the form: function(err,result) { ... }.\n   * _gate_:   this worker is a gate; all subsequent workers will wait for this one to complete.\n   * _ungate_: this worker will ignore any gates that are active, and so will be executed regardless.\n\n\n# Testing\n\n```js\nnpm test\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "gate-executor@0.2.3",
  "dist": {
    "shasum": "d6929ab8b16b68e9b9043ead87cb1667706188cb"
  },
  "_from": "gate-executor@0.2.3",
  "_resolved": "https://registry.npmjs.org/gate-executor/-/gate-executor-0.2.3.tgz"
}
