{
  "name": "zig",
  "version": "0.1.1",
  "description": "Simple, but naughty, control flow for Node.js.",
  "main": "zig.js",
  "scripts": {
    "test": "./test.sh",
    "build": "./build.sh"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rjrodger/zig.git"
  },
  "keywords": [
    "zig",
    "chain",
    "chaining",
    "step",
    "wait",
    "task"
  ],
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com/"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "readme": "Zig - Simple, but naughty, control flow for Node.js\n======================================================\n\n> Why have an if statement when you can have an if function?\n\nA special case solution for callback hell that focuses on developer\nease-of-use. Executes your functions in series or parallel, tracks\nerrors and results, **and provides conditionals**.\n\nAllows you to move blocks of code around to change the order of\nexecution.\n\n\nCurrent Version: 0.1.1\n\nTested on: Node 0.10.38\n\n[![Build Status](https://travis-ci.org/rjrodger/zig.png?branch=master)](https://travis-ci.org/rjrodger/zig)\n\n[Annotated Source](http://rjrodger.github.io/zig/doc/zig.html)\n\n\n# Support\n\nIf you're using this module, feel free to contact me on twitter if you\nhave any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/zig.png)](https://gitter.im/rjrodger/zig)\n\n\n# Install\n\n```sh\nnpm install zig\n```\n\n\n## Quick Example\n\nSome callbacks:\n\n```js\nfunction color(val,callback) {\n  callback(null,{color:val})\n}\n\nfunction quality(val,callback) {\n  callback(null,{quality:val})\n}\n\nfunction sound(val,callback) {\n  callback(null,{sound:val})\n}\n\nfunction texture(val,callback) {\n  callback(null,{texture:val})\n}\n```\n\n\nNice and linear down the page.\n\n```js\nvar zig = require('..')\n\nvar result = {}\n\nzig()\n  .start()\n\n  .wait(function(data,done){\n    color('red',done)\n  })\n  .step(function(data){\n    console.log('color:'+data.color)\n    return result.color = data.color\n  })\n\n  .wait(function(data,done){\n    quality('high',done)\n  })\n  .step(function(data){\n    console.log('quality:'+data.quality)\n    return result.quality = data.quality\n  })\n\n  .if( Math.random() < 0.5 )\n  .wait(function(data,done){\n    sound('violin',done)\n  })\n  .step(function(data){\n    console.log('sound:'+data.sound)\n    return result.sound = data.sound\n  })\n  .endif()\n\n  .wait(function(data,done){\n    texture('rough',done)\n  })\n  .step(function(data){\n    console.log('texture:'+data.texture)\n    return result.texture = data.texture\n  })\n\n  .end(function(err){\n    if( err ) return console.log(err)\n    console.log(result)\n  })\n```\n\n\nVersus callback hell:\n\n```js\nvar result = {}\n\ncolor('red', function(err,data){\n  if( err ) return console.log(err)\n\n  result.color = data.color\n  console.log('color:'+data.color)\n\n  quality('high', function(err,data){\n    if( err ) return console.log(err)\n\n    result.quality = data.quality\n    console.log('quality:'+data.quality)\n\n    if( Math.random() < 0.5 ) {\n      sound('violin',function(err,data){\n        if( err ) return console.log(err)\n\n        result.sound = data.sound\n        console.log('sound:'+data.sound)\n        do_texture()\n      })\n    }\n    else do_texture()\n\n    function do_texture() {\n      texture('rough', function(err,data){\n        if( err ) return console.log(err)\n\n        result.texture = data.texture\n        console.log('texture:'+data.texture)\n\n        console.log(result)\n      })\n    }\n  })\n})\n```\n\n\n## Testing\n\n```sh\nnpm test\n```\n\n\n## Releases\n\n   * 0.1.0: normalize test, build, and readme\n   * 0.0.2: steps can exit\n   * 0.0.1: first working version\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rjrodger/zig/issues"
  },
  "_id": "zig@0.1.1",
  "_from": "zig@0.1.1"
}
