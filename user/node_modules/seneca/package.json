{
  "name": "seneca",
  "description": "A Microservices Framework for Node.js",
  "keywords": [
    "micro",
    "service",
    "microservice",
    "micro-service",
    "microservices",
    "micro-services",
    "services",
    "micro services",
    "micro service",
    "framework",
    "minimum",
    "viable",
    "product",
    "toolkit",
    "startup"
  ],
  "version": "0.7.1",
  "license": "MIT",
  "homepage": "http://senecajs.org",
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com/"
  },
  "contributors": [
    {
      "name": "Richard Rodger",
      "url": "http://richardrodger.com"
    },
    {
      "name": "Wyatt Preul"
    },
    {
      "name": "Dean McDonnell"
    },
    {
      "name": "Peter Elger"
    },
    {
      "name": "Cristian Ianto"
    },
    {
      "name": "Dominic Tarr"
    },
    {
      "name": "David Mark Clements"
    },
    {
      "name": "Nicolas Herment"
    },
    {
      "name": "Maciej MaÅ‚ecki",
      "url": "http://mmalecki.com"
    },
    {
      "name": "Jake Pruitt"
    },
    {
      "name": "Marian Radulescu"
    },
    {
      "name": "Alexandru Mircea"
    },
    {
      "name": "Adrian Rossouw",
      "url": "http://daemon.co.za"
    }
  ],
  "dependencies": {
    "archy": "1.0.0",
    "eraro": "0.4.1",
    "gate-executor": "0.2.3",
    "gex": "0.2.0",
    "jsonic": "0.2.1",
    "lodash": "2.4.2",
    "lru-cache": "2.6.4",
    "minimist": "1.1.1",
    "nid": "0.3.2",
    "norma": "0.3.0",
    "parambulator": "1.5.1",
    "patrun": "0.5.0",
    "rolling-stats": "0.1.1",
    "seneca-basic": "0.3.0",
    "seneca-mem-store": "0.3.1",
    "seneca-transport": "0.7.2",
    "seneca-web": "0.4.3",
    "use-plugin": "0.3.1",
    "zig": "0.1.1"
  },
  "main": "seneca.js",
  "files": [
    "LICENSE.txt",
    "README.md",
    "CHANGES.md",
    "lib",
    "seneca.js"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/rjrodger/seneca.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/lab -v -P test",
    "build": "./build.sh"
  },
  "devDependencies": {
    "async": "0.9.2",
    "body-parser": "1.11.0",
    "connect": "3.0.2",
    "connect-query": "0.2.0",
    "docco": "0.7.0",
    "jshint": "2.8.0",
    "lab": "6.0.0",
    "seneca-echo": "0.2.0",
    "seneca-error-test": "0.2.2"
  },
  "readme": "![Seneca](http://senecajs.surge.sh/files/assets/seneca-logo.png)\n> A Node.js toolkit for Micro-Service Architectures\n\n\nSeneca provides a toolkit for writing micro-services in Node.js. Seneca provides:\n\n   * pattern matching: a wonderfully flexible way to handle business requirements\n\n   * transport independence: how messages get to the right server is not something you should have to worry about\n\n   * maturity: 5 years in production (before we called it _micro-services_), but was once taken out by [lightning](http://aws.amazon.com/message/67457/)\n\n   * deep and wide ecosystem of [plugins](https://github.com/search?utf8=%E2%9C%93&q=seneca&type=Repositories&ref=searchresults)\n\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/seneca.png)](https://gitter.im/rjrodger/seneca)\n\nSeneca is a toolkit for organizing the business logic of your app. You\ncan break down your app into \"stuff that happens\", rather than\nfocusing on data models or managing dependencies.\n\nFor a gentle introduction to this module, see the\n[senecajs.org](http://senecajs.org) site.\n\nIf you're using this module, feel free to contact me on twitter if you\nhave any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\nCurrent Version: 0.7.1\n\nTested on: Node 4, 0.12, 0.10.\n\n[![Build Status](https://travis-ci.org/rjrodger/seneca.png?branch=master)](https://travis-ci.org/rjrodger/seneca)\n\n[Annotated Source Code](http://senecajs.org/doc/seneca.html).\n\n\nUse this module to define commands that work by taking in some JSON,\nand, optionally, returning some JSON. The command to run is selected\nby pattern-matching on the the input JSON.  There are built-in and\noptional sets of commands that help you build Minimum Viable Products:\ndata storage, user management, distributed logic, caching, logging,\netc.  And you can define your own product by breaking it into a set of\ncommands - \"stuff that happens\".\n\nThat's pretty much it.\n\n\n_Why do this?_\n\nIt doesn't matter,\n\n   * who provides the functionality,\n   * where it lives (on the network),\n   * what it depends on,\n   * it's easy to define blocks of functionality (plugins!).\n\nSo long as _some_ command can handle a given JSON document, you're good.\n\nHere's an example:\n\n```javascript\nvar seneca = require('seneca')()\n\nseneca.add( {cmd:'salestax'}, function(args,callback){\n  var rate  = 0.23\n  var total = args.net * (1+rate)\n  callback(null,{total:total})\n})\n\nseneca.act( {cmd:'salestax', net:100}, function(err,result){\n  console.log( result.total )\n})\n```\n\nIn this code, whenever seneca sees the pattern\n<code>{cmd:'salestax'}</code>, it executes the function associated\nwith this pattern, which calculates sales tax. Yah!\n\nThe _seneca.add_ method adds a new pattern, and the function to execute whenever that pattern occurs.\n\nThe _seneca.act_ method accepts an object, and runs the command, if any, that matches.\n\nWhere does the sales tax rate come from? Let's try it again:\n\n```javascript\nseneca.add( {cmd:'config'}, function(args,callback){\n  var config = {\n    rate: 0.23\n  }\n  var value = config[args.prop]\n  callback(null,{value:value})\n})\n\nseneca.add( {cmd:'salestax'}, function(args,callback){\n  seneca.act( {cmd:'config', prop:'rate'}, function(err,result){\n    var rate  = parseFloat(result.value)\n    var total = args.net * (1+rate)\n    callback(null,{total:total})\n  })\n})\n\nseneca.act( {cmd:'salestax', net:100}, function(err,result){\n  console.log( result.total )\n})\n```\n\nThe _config_ command provides you with your configuration. This is\ncool because it doesn't matter _where_ it gets the configuration from\n- hard-coded, file system, database, network service, whatever. Did\nyou have to define an abstraction API to make this work? Nope.\n\nThere's a little but too much verbosity here, don't you think? Let's fix that:\n\n\n```javascript\nseneca.act('cmd:salestax,net:100', function(err,result){\n  console.log( result.total )\n})\n```\n\nInstead of providing an object, you can provide a string using an\n[abbreviated form of JSON](//github.com/rjrodger/jsonic). In fact, you\ncan provide both:\n\n```javascript\nseneca.act('cmd:salestax', {net:100}, function(err,result){\n  console.log( result.total )\n})\n```\n\nThis is a very convenient way of combining a pattern and parameter data.\n\n\n\n_Programmer Anarchy_\n\nThe way to build Node.js systems, is to build lots of little\nprocesses. Here's a great talk explaining why you should do this:\n[Programmer Anarchy](http://vimeo.com/43690647).\n\nSeneca makes this really easy. Let's put configuration out on the\nnetwork into its own process:\n\n```javascript\nseneca.add( {cmd:'config'}, function(args,callback){\n  var config = {\n    rate: 0.23\n  }\n  var value = config[args.prop]\n  callback(null,{value:value})\n})\n\nseneca.listen()\n```\n\nThe _listen_ method starts a web server that listens for JSON\nmessages. When these arrive, they are submitted to the local Seneca\ninstance, and executed as actions in the normal way.  The result is\nthen returned to the client as the response to the HTTP\nrequest. Seneca can also listen for actions via a message bus.\n\nYour implementation of the configuration code _stays the same_.\n\nThe client code looks like this:\n\n\n```javascript\nseneca.add( {cmd:'salestax'}, function(args,callback){\n  seneca.act( {cmd:'config', prop:'rate'}, function(err,result){\n    var rate  = parseFloat(result.value)\n    var total = args.net * (1+rate)\n    callback(null,{total:total})\n  })\n})\n\nseneca.client()\n\nseneca.act('cmd:salestax,net:100', function(err,result){\n  console.log( result.total )\n})\n```\n\nOn the client-side, calling _seneca.client()_ means that Seneca will\nsend any actions it cannot match locally out over the network. In this\ncase, the configuration server will match the _cmd:config_ pattern and\nreturn the configuratin data.\n\nAgain, notice that your sales tax code _does not change_. It does not\nneed to know where the configuration comes from, who provides it, or\nhow.\n\nYou can do this with every command.\n\n\n_Keeping the Business Happy_\n\nThe thing about business requirements is that have no respect for\ncommon sense, logic or orderly structure. The real world is\nmessy.\n\nIn our example, let's say some countries have single sales tax rate,\nand others have a variable rate, which depends either on locality, or product category.\n\nHere's the code. We'll rip out the configuration code for this example.\n\n```javascript\n// fixed rate\nseneca.add( {cmd:'salestax'}, function(args,callback){\n  var rate  = 0.23\n  var total = args.net * (1+rate)\n  callback(null,{total:total})\n})\n\n\n// local rates\nseneca.add( {cmd:'salestax',country:'US'}, function(args,callback){\n  var state = {\n    'NY': 0.04,\n    'CA': 0.0625\n    // ...\n  }\n  var rate = state[args.state]\n  var total = args.net * (1+rate)\n  callback(null,{total:total})\n})\n\n\n// categories\nseneca.add( {cmd:'salestax',country:'IE'}, function(args,callback){\n  var category = {\n    'top': 0.23,\n    'reduced': 0.135\n    // ...\n  }\n  var rate = category[args.category]\n  var total = args.net * (1+rate)\n  callback(null,{total:total})\n})\n\n\nseneca.act('cmd:salestax,net:100,country:DE', function(err,result){\n  console.log( 'DE: '+result.total )\n})\n\nseneca.act('cmd:salestax,net:100,country:US,state:NY', function(err,result){\n  console.log( 'US,NY: '+result.total )\n})\n\nseneca.act('cmd:salestax,net:100,country:IE,category:reduced', function(err,result){\n  console.log( 'IE: '+result.total )\n})\n\n```\n\nIn this case, you provide different implementations for different\npatterns. This lets you isolate complexity into well-defined\nplaces. It also means you can deal with special cases very easily.\n\n\n_Examples_\n\nFor more examples of Seneca in action, take a look at:\n\n   * [seneca-examples](//github.com/rjrodger/seneca-examples)\n   * [nodezoo.com](//nodezoo.com/#q=seneca)\n   * [Well!](//github.com/nearform/well)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rjrodger/seneca/issues"
  },
  "_id": "seneca@0.7.1",
  "_from": "seneca@"
}
