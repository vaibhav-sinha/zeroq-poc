{
  "name": "jsonic",
  "version": "0.2.1",
  "description": "A JSON parser that isn't strict.",
  "main": "jsonic.js",
  "scripts": {
    "test": "./test.sh",
    "build": "./build.sh"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rjrodger/jsonic.git"
  },
  "keywords": [
    "json",
    "parser"
  ],
  "homepage": "https://github.com/rjrodger/jsonic",
  "author": {
    "name": "Richard Rodger",
    "url": "http://richardrodger.com"
  },
  "license": "MIT",
  "files": [
    "README.md",
    "LICENSE",
    "jsonic.js",
    "jsonic-min.js",
    "jsonic-min.map",
    "jsonic-parser.js",
    "jsonic-parser.pegjs"
  ],
  "readme": "# jsonic\n\n### A JSON parser for Node.js that isn't strict.\n\n\nA JSON parser that can parse \"bad\" JSON. Mostly, this is about\navoiding the need to quote everything!\n\nStrict JSON requires you to do this:\n\n```JavaScript\n{ \"foo\":\"bar\", \"red\":1 }\n```\n\nThe JavaScript language itself is a little easier:\n\n```JavaScript\n{ foo:\"bar\", red:1, }\n```\n\nBut if you really want to be lazy, jsonic lets you say:\n\n```JavaScript\nfoo:bar, red:1,\n```\n\nSee below for the relaxed JSON rules.\n\n\n\nThis module is used by the [Seneca](http://senecajs.org) framework to\nprovide an abbreviated command syntax.\n\n\n\n\n### Support\n\nIf you're using this module, feel free to contact me on twitter if you have any questions! :) [@rjrodger](http://twitter.com/rjrodger)\n\n[![Gitter chat](https://badges.gitter.im/rjrodger/jsonic.png)](https://gitter.im/rjrodger/jsonic)\n\nCurrent Version: 0.2.1\n\nTested on: node 0.10, 0.11, 0.12, iojs, Chrome 43, Safari 7, Firefox 38\n\n[![Build Status](https://travis-ci.org/rjrodger/jsonic.png?branch=master)](https://travis-ci.org/rjrodger/jsonic)\n\n\n\n### Quick example\n\n```JavaScript\nvar jsonic = require('jsonic')\n\n// parse a string into a JavaScript object\nvar obj = jsonic('foo:1, bar:zed')\n\n// prints { foo: '1', bar: 'zed' }\nconsole.dir( obj )\n\n```\n\n## Install\n\n```sh\nnpm install jsonic\n```\n\n\n# Relaxed Rules\n\nJSONIC format is just standard JSON, with a few rule relaxations:\n\n   * You don't need to quote property names: <code>{ foo:\"bar baz\", red:255 }</code>\n   * You don't need the top level braces: <code>foo:\"bar baz\", red:255</code>\n   * You don't need to quote strings with spaces: <code>foo:bar baz, red:255</code>\n   * You _do_ need to quote strings if they contain a comma or closing brace or square bracket: <code>icky:\"_,}]_\"</code>\n   * You can use single quotes for strings: <code>Jules:'Cry \"Havoc,\" and let slip the dogs of war!'</code>\n   * You can have trailing commas: <code>foo:bar, red:255, </code>\n\n\n# Stringify\n\nThe _jsonic_ module provides a `stringify` method:\n\n``` js\nconsole.log( jsonic.stringify( {a:\"bc\",d:1} ) ) // prints {a:bc,d:1} \n```\n\nThe `stringify` method converts a plain JavaScript object into a\nstring that can be parsed by _jsonic_. It has two parameters:\n\n   * `value`: plain object\n   * `options`: optional options object\n\nFor example, you can limit the depth of the object tree printed:\n\n``` js\nconsole.log( jsonic.stringify( {a:{b:{c:1}}}, {depth:2} ) ) // prints {a:{b:{}}} \n```\n\n__NOTE: `jsonic.stringify` is intended for debug printing, not data exchange, so the defaults are conservative in the amount of data printed__\n\nThe options are:\n\n   * _depth_:    default: __3__; maximum depth of sub-objects printed; _NOTE: there is no infinite-cycle protection, just this finite depth_\n   * _maxitems_: default: __11__; maximum number of array elements or object key/value pairs printed\n   * _maxchars_: default: __111__; maximum number of characters printed\n   * _omit_: default:__[]__; omit listed keys from objects\n   * _exclude_: default:__['$']__; omit keys from objects if they contain any of the listed values\n\n\n## How it Works\n\nThe parser uses [PEG.js](http://pegjs.majda.cz/) and is an extension of the example JSON parser included in that project.\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rjrodger/jsonic/issues"
  },
  "_id": "jsonic@0.2.1",
  "_from": "jsonic@0.2.1"
}
