{
  "name": "chairo",
  "description": "Seneca micro-services plugin for hapi",
  "version": "0.2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/chairo"
  },
  "main": "lib/index.js",
  "keywords": [
    "hapi",
    "plugin",
    "microservices",
    "seneca"
  ],
  "engines": {
    "node": ">=0.10.38"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "^2.14.x",
    "items": "1.x.x",
    "joi": "6.x.x",
    "jsonic": "0.1.x",
    "seneca": "0.7.x",
    "vision": "3.x.x"
  },
  "peerDependencies": {
    "hapi": ">=8.5.0"
  },
  "devDependencies": {
    "code": "1.x.x",
    "handlebars": "4.x.x",
    "hapi": ">=8.5.0",
    "lab": "6.x.x"
  },
  "scripts": {
    "test": "node node_modules/lab/bin/lab -a code -t 100 -L",
    "test-cov-html": "node node_modules/lab/bin/lab -a code -r html -o coverage.html"
  },
  "license": "BSD-3-Clause",
  "readme": "#chairo\n\n**chairo** (\"happy\" in ancient Greek: χαίρω) is a [**Seneca**](http://senecajs.org/) micro-services plugin\nfor [hapi](https://github.com/hapijs/hapi). The plugin integrates the **Seneca** functionality into\n**hapi** and provide tools to map its actions to server methods and views for easy access.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/chairo.png)](http://travis-ci.org/hapijs/chairo)\n\nLead Maintainer - [Wyatt Preul](https://github.com/geek)\n\n### Usage\n\n#### Plugin Registration\n\n**chairo** is registered with a **hapi** server using the `server.register()` method. Once\nregistered it decorates the `server` object with a reference to the `seneca` object initialized\nusing the provided plugin options:\n\n```js\nvar Chairo = require('chairo');\nvar Hapi = require('hapi');\n\nvar server = new Hapi.Server();\nserver.connection();\n\n// Pass options to the Seneca constructor\n\nvar senecaOptions = { log: 'silent' };\n\n// Register plugin\n\nserver.register({ register: Chairo, options: senecaOptions }, function (err) {\n\n\t// Add a Seneca action\n\n    var id = 0;\n    server.seneca.add({ generate: 'id' }, function (message, next) {\n\n        return next(null, { id: ++id });\n    });\n\n\t// Invoke a Seneca action\n\n    server.seneca.act({ generate: 'id' }, function (err, result) {\n\n        // result: { id: 1 }\n    });\n});\n```\n\nIn addition, the **hapi** request object is decorated with a reference to the `seneca` object for\neasy access:\n\n```js\nserver.route({\n\tmethod: 'POST',\n\tpath: '/id',\n\thandler: function (request, reply) {\n\n\t\t// Invoke a Seneca action using the request decoration\n\n\t\trequest.seneca.act({ generate: 'id' }, function (err, result) {\n\n\t\t\tif (err) {\n\t\t\t\treturn reply(err);\n\t\t\t}\n\n\t\t\treturn reply(result);\n\t\t});\n\t}\n});\n```\n\n#### `server.action(name, pattern, [options])`\n\nMaps a **Seneca** action pattern to a **hapi**\n[server method](https://github.com/hapijs/hapi/blob/master/API.md#servermethodname-method-options)\n where:\n- `name` - the server method name (same as the name used in `server.method()`).\n- `pattern` - the **Seneca** action pattern (e.g. `'generate:id'` or `{ generate: 'id' }`) to map.\n- `options` - optional settings options where:\n    - `cache` - method caching options (same as the name used in `server.method()`).\n\n```js\nvar Chairo = require('chairo');\nvar Hapi = require('hapi');\n\nvar server = new Hapi.Server();\nserver.connection();\nserver.register(Chairo, function (err) {\n\n\t// Set up a Seneca action\n\n    var id = 0;\n    server.seneca.add({ generate: 'id' }, function (message, next) {\n\n        return next(null, { id: ++id });\n    });\n\n\t// Map action to a hapi server method\n\n    server.action('generate', 'generate:id', { cache: { expiresIn: 1000, generateTimeout: 3000 } });\n\n\t// Start hapi server (starts cache)\n\n    server.start(function () {\n\n\t\t// Invoke server method\n\n        server.methods.generate(function (err, result1) {\n\n\t\t\t// Invoke the same server method\n\n            server.methods.generate(function (err, result2) {\n\n\t\t\t\t// result1 === result2 (cached)\n            });\n        });\n    });\n});\n```\n\n#### `reply.act(pattern)`\n\nSends back a handler response using the result of a **Seneca** action where:\n- `pattern` - the **Seneca** action called to generate the response.\n\n```js\nvar Chairo = require('chairo');\nvar Hapi = require('hapi');\n\nvar server = new Hapi.Server();\nserver.connection();\nserver.register(Chairo, function (err) {\n\n\t// Set up a Seneca action\n\n    var id = 0;\n    server.seneca.add({ generate: 'id' }, function (message, next) {\n\n        return next(null, { id: ++id });\n    });\n\n\t// Add route\n\n    server.route({\n\t\tmethod: 'POST',\n\t\tpath: '/id',\n\t\thandler: function (request, reply) {\n\n\t\t\t// Reply using a Seneca action\n\n\t\t\treturn reply.act({ generate: 'id' });\n\t\t}\n\t});\n});\n```\n\nIn addition, the `act` handler shortcut is also provided:\n\n```js\nserver.route({\n\tmethod: 'POST',\n\tpath: '/id',\n\thandler: { act: 'generate:id' }\n});\n```\n\n#### `reply.compose(template, context, [options])`\n\nRenders a template view using the provided template and context where:\n- `template` - the view engine template (same as the name used in\n  [`reply.view()`](https://github.com/hapijs/hapi/blob/master/API.md#replyviewtemplate-context-options)).\n- `context` - the context object used to render the template where each top level key with a `$`\n  suffix is assigned the corresponding **Seneca** action matching the key's value pattern.\n- `options` - optionals settings passed to `reply.view()`.\n\n```js\nvar Chairo = require('chairo');\nvar Handlebars = require('handlebars');\nvar Hapi = require('hapi');\n\nvar server = new Hapi.Server();\nserver.connection();\nserver.register(Chairo, function (err) {\n\n\t// set up a few Seneca actions\n\n    server.seneca.add({ lookup: 'date' }, function (message, next) {\n\n        return next(null, { date: (new Date()).toString() });\n    });\n\n    server.seneca.add({ load: 'user' }, function (message, next) {\n\n        return next(null, { name: message.name });\n    });\n\n\t// Set up a hapi view engine\n\n    server.views({\n        engines: { html: Handlebars },\n        path: __dirname + '/templates'\n    });\n\n\t// Add route\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        handler: function (request, reply) {\n\n\t\t\t// Setup context with both Seneca actions and simple keys\n\n            var context = {\n                today$: 'lookup:date',\t\t\t\t\t\t\t// Using string pattern\n                user$: { load: 'user', name: 'john' },\t\t\t// Using object pattern\n                general: {\n                    message: 'hello!'\n                }\n            };\n\n\t\t\t// Reply with rendered view\n\n            return reply.compose('example', context);\n        }\n    });\n});\n```\n\nUsing the template `./templates/example.html`:\n\n```html\n<div>\n    <h1>{{today$.date}}</h1>\n    <h2>{{user$.name}}</h2>\n    <h3>{{general.message}}</h3>\n</div>\n```\n\nIn addition, the `compose` handler shortcut is also provided:\n\n```js\nserver.route({\n\tmethod: 'POST',\n\tpath: '/id',\n    handler: {\n        compose: {\n            template: 'example',\n            context: {\n                today$: 'lookup:date',\n                user$: { load: 'user', name: 'john' },\n                general: {\n                    message: 'hello!'\n                }\n            }\n        }\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/chairo/issues"
  },
  "_id": "chairo@0.2.0",
  "dist": {
    "shasum": "574ad8709f318dddd37cc50feac8954b7cdba1a1"
  },
  "_from": "chairo@",
  "_resolved": "https://registry.npmjs.org/chairo/-/chairo-0.2.0.tgz"
}
