{
  "name": "hbsfy",
  "version": "2.2.1",
  "description": "Handlebars precompiler plugin for Browserify v2",
  "main": "index.js",
  "scripts": {
    "test": "sh test.sh"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/epeli/node-hbsfy"
  },
  "keywords": [
    "handlebars",
    "browserify",
    "js",
    "plugin",
    "transform",
    "browserify-transform"
  ],
  "author": {
    "name": "Esa-Matti Suuronen"
  },
  "license": "MIT",
  "dependencies": {
    "through": "~2.3.4",
    "xtend": "~3.0.0"
  },
  "devDependencies": {
    "browserify": "~4.2.3",
    "concat-stream": "~1.4.1",
    "ember-template-compiler": "^1.6.1",
    "handlebars": "~1.3.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/epeli/node-hbsfy.png?branch=master)](https://travis-ci.org/epeli/node-hbsfy)\n\n# hbsfy\n\n[Handlebars][] precompiler plugin for [Browserify][] without magic.\n\nCompiles Handlebars templates to plain Javascript. The compiled templates only\nhave one copy of the Handlebars runtime so they are lightweight and fast!\n\n## Usage\n\nInstall hbsfy locally to your project:\n\n    npm install hbsfy\n\nYou will also need Handlebars installed. Handlebars 1.x is officially supported\nfor now:\n\n    npm install handlebars@1\n\nAlthough the alpha version of Handlebars 2.0 should also work. Just drop the\n`@1` to try it.\n\nThen use it as Browserify transform module with `-t`:\n\n    browserify -t hbsfy main.js > bundle.js\n\nwhere main.js can be like:\n\n```javascript\nvar template = require(\"./template.hbs\");\ndocument.body.innerHTML = template({ name: \"Epeli\" });\n```\n\nand template.hbs:\n\n```html\n<h1>Hello {{name}}!</h1>\n```\n\n## Options\n\n### Custom Extension\n\nYou can use `--extensions` or `-e` subarg option to configure custom extensions\nfor the transform:\n\n    browserify -t [ hbsfy -e html,htm ] main.js > bundle.js\n\n### Alternate Precompiler/Compiler\n\nYou can specify how the templates are precompiled by using `-p` or `--precompiler`, which\nmight also be used with the `-c` or `--compiler` option, like so:\n\n    browserify -t [ hbsfy -p ember-template-compiler -c Ember.Handlebars ] main.js > bundle.js\n\nBy default the precompiler is the [handlebars](https://www.npmjs.org/package/handlebars) node module\nand the compiler is `\"require('hbsfy/runtime')\"`.\n\nOptions for the precompiler can be passed using a `precompilerOptions` key.\n\nExample:\n\nEnable `myUltimateHelper` only\n\n    browserify -t [ hbsfy --precompilerOptions [ --knownHelpersOnly --knownHelpers [ --myUltimateHelper ] ] ]  main.js > bundle.js\n\nSee [Handlebars API reference](http://handlebarsjs.com/reference.html) for\ndetails.\n\n## package.json\n\nTransform can be configured from the package.json too.\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [\n      [\n        \"hbsfy\",\n        {\n          \"extensions\": [\n            \"html\"\n          ],\n          \"precompilerOptions\": {\n            \"knownHelpersOnly\": true,\n            \"knownHelpers\": {\n              \"myUltimateHelper\": true\n            }\n          }\n        }\n      ]\n    ]\n  }\n}\n```\n\nThe `precompiler` and `compiler` keys are naturally available too.\n\nSee [module-deps\ndocumentation](https://github.com/substack/module-deps#packagejson-transformkey)\nfor more information as this feature is implemented there (it's a part of\nBrowserify itself).\n\n## Programmatic usage\n\nThe `configure` method of the transform can be used to create new transforms\nwith different defaults.\n\n```javascript\nvar hbsfy = require(\"hbsfy\").configure({\n  extensions: [\"html\"]\n});\n\nvar browserify = require(\"browserify\");\nvar b = browserify(\"./index.js\");\nb.transform(hbsfy);\nb.bundle().pipe(fs.createWriteStream(\"./bundle.js\"));\n```\n\n### Helpers\n\nTo register custom helpers just require the runtime use and `registerHelper` to\ncreate helper:\n\n```javascript\nvar Handlebars = require(\"hbsfy/runtime\");\nHandlebars.registerHelper(\"upcase\", function(s) {\n  return s.toUpperCase();\n});\n```\n\n### Partials\n\nPartials can be created by giving precompiled template to the `registerPartial`\nfunction.\n\n```javascript\nHandlebars.registerPartial('link', require(\"./partial.hbs\"));\n```\n\nCheckout the example folder for details.\n\n\n## Changelog\n\n### 2.2.1\n\n  - Emit compile errors instead of crashing. [#38](https://github.com/epeli/node-hbsfy/pull/38)\n\n### 2.2.0\n\n  - Support for compiler options [#29](https://github.com/epeli/node-hbsfy/pull/29)\n\n### 2.1.0\n\n  - Subargs options for alternate precompilers and compilers [#31](https://github.com/epeli/node-hbsfy/pull/31)\n\n### 2.0.0\n\n  - Support Browserify [subargs](https://github.com/substack/node-browserify/blob/5cbf55a4397f300df69be574b59f3f30ac01b9c2/bin/advanced.txt#L81-L90)\n  - The `configure` method does not mutate the inner state of the  module\n    anymore\n    - Instead it returns a new transform function.\n  - Handlebars is not a peerDependency anymore\n    - It must be manually installed\n    - This relaxes completely the version binding of Handlebars - it is now possible to try Handlebars 2.0 alpha\n\n### 1.3.0\n\n  - Support Handlebars 1.3\n  - Now uses the official runtime api\n\n### 1.0.0\n\n  - Remove `handlebars-runtime` dependency and depend directly on\n    the `handlebars` module as a [peer dependency][].\n    - Runtime must be now required with `require(\"hbsfy/runtime\")` instead of\n      `require(\"handlebars-runtime\")`.\n    - Thanks to @kamicane for teaching me how to do this.\n  - Option to configure template extensions\n\n\n[Handlebars]: http://handlebarsjs.com/\n[Browserify]: https://github.com/substack/node-browserify\n[peer dependency]: http://blog.nodejs.org/2013/02/07/peer-dependencies/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/epeli/node-hbsfy/issues"
  },
  "homepage": "https://github.com/epeli/node-hbsfy",
  "_id": "hbsfy@2.2.1",
  "_from": "hbsfy@2.2.x"
}
