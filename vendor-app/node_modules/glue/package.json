{
  "name": "glue",
  "description": "Server composer for hapi.js",
  "version": "2.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/glue"
  },
  "main": "lib/index.js",
  "keywords": [
    "server",
    "pack",
    "composer",
    "manifest",
    "hapi"
  ],
  "engines": {
    "node": ">=0.10.32"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hapi": "8.x.x || 9.x.x || 10.x.x",
    "hoek": "2.x.x",
    "items": "1.x.x",
    "joi": "5.x.x || 6.x.x"
  },
  "devDependencies": {
    "catbox-memory": "1.x.x",
    "code": "1.x.x",
    "lab": "5.x.x"
  },
  "scripts": {
    "test": "node node_modules/lab/bin/lab -a code -t 100 -L",
    "test-cov-html": "node node_modules/lab/bin/lab -a code -r html -o coverage.html"
  },
  "license": "BSD-3-Clause",
  "readme": "# glue\n\nServer composer for hapi.js.\n\n[![Build Status](https://travis-ci.org/hapijs/glue.svg?branch=master)](https://travis-ci.org/hapijs/glue)\n\nLead Maintainer - [Chris Rempel](https://github.com/csrl)\n\n## Interface\n\nGlue exports a single function `compose` accepting a JSON `manifest` file specifying the Hapi server options, connections and plugins.  Glue primarily works in synergy with [Rejoice](https://github.com/hapijs/rejoice), but can be integrated directly into any Hapi application loader.\n\n- `compose(manifest, [options], callback)`\n  + `manifest` - an object having:\n    * 'server' - an object containing the options passed to [`new Server([options])`](http://hapijs.com/api#new-serveroptions)\n    * 'connections' - an array of connection options, passed individually in calls to [`server.connection([options])`](http://hapijs.com/api#serverconnectionoptions)\n    * 'plugins' - an object or array of objects holding plugin entries to register with [`server.register(plugin, [options], callback)`](http://hapijs.com/api#serverregisterplugins-options-callback). Each object key is the `name` of the plugin to load and register and the value is one of:\n      + an object to use as the plugin options which get passed to the plugin's registration function when called.\n      + an array of objects where each object will load a separate instance of the plugin. Multiple instances of a plugin is only possible if supported by the plugin ie. the plugin is implemented with `attributes.multiple` as `true`. Each object can have:\n        * any option from [`server.register`](http://hapijs.com/api#serverregisterplugins-options-callback) options\n        * `options` - an object to use as the plugin options which get passed to the plugin's registration function when called.\n  + `options` - an object having\n    * 'relativeTo' - a file-system path string that is used to resolve loading modules with `require`.  Used in `server.cache` and `plugins[name]`\n    * 'preConnections' - a callback function that is called prior to adding connections to the server. The function signature is `function (server, next)` where:\n      + `server` - is the server object returned from `new Server(options)`.\n      + `next`-  the callback function the method must call to return control over to glue\n    * 'prePlugins' - a callback function that is called prior to registering plugins with the server. The function signature is `function (server, next)` where:\n      + `server` - is the server object with all connections selected.\n      + `next`-  the callback function the method must call to return control over to glue\n  + `callback` - the callback function with signature `function (err, server)` where:\n    * `err` - the error response if a failure occurred, otherwise `null`.\n    * `server` - the server object. Call `server.start()` to actually start the server.\n\n### Notes\n\nWhen using an an object as the value for the `manifest.plugins` field, the order of plugin registration is not guaranteed. When using an array as the value, then the plugin registration order follows the array order. If you are developing a plugin, you should ensure your plugin dependencies are properly managed to guarantee that all dependencies are loaded before your plugin registration completes.  See [`server.dependency(dependencies, [after])`](http://hapijs.com/api#serverdependencydependencies-after) for more information.\n\n## Usage\n\n```javascript\nvar Glue = require('glue');\n\nvar manifest = {\n    server: {\n        cache: 'redis'\n    },\n    connections: [\n        {\n            port: 8000,\n            labels: ['web']\n        },\n        {\n            port: 8001,\n            labels: ['admin']\n        }\n    ],\n    plugins: [\n        {'./assets': {\n            uglify: true\n        }},\n        {'./ui-user': [\n            {\n                select: ['web'],\n                options: { }\n            }\n        ]},\n        {'./ui-admin': [\n            {\n                select: ['admin'],\n                routes: {\n                    prefix: '/admin'\n                },\n                options: {\n                    sessiontime: 500\n                }\n            }\n        ]}\n    ]\n};\n\nvar options = {\n    relativeTo: __dirname\n};\n\nGlue.compose(manifest, options, function (err, server) {\n\n    if (err) {\n        throw err;\n    }\n    server.start(function () {\n\n        console.log('Hapi days!');\n    });\n});\n```\n\nThe above is translated into the following equivalent Hapi API calls.\n\n```javascript\nvar server = Hapi.Server({cache: [{engine: require('redis')}]});\nserver.connection({\n    port: 8000,\n    labels: ['web']\n});\nserver.connection({\n    port: 8001,\n    labels: ['admin']\n});\nvar pluginPath, pluginOptions, registerOptions;\npluginPath = Path.join(__dirname, './assets');\npluginOptions = {uglify: true};\nregisterOptions = {};\nserver.register({register: require(pluginPath), options: pluginOptions}, registerOptions, function (err) {\n\n    if (err) {\n        throw err;\n    }\n    pluginPath = Path.join(__dirname, './ui-user');\n    pluginOptions = {};\n    registerOptions = {select: ['web']};\n    server.register({register: require(pluginPath), options: pluginOptions}, registerOptions, function (err) {\n\n        if (err) {\n            throw err;\n        }\n        pluginPath = Path.join(__dirname, './ui-admin');\n        pluginOptions = {sessiontime: 500};\n        registerOptions = {select: ['admin'], routes: {prefix: '/admin'}};\n        server.register({register: require(pluginPath), options: pluginOptions}, registerOptions, function (err) {\n\n            if (err) {\n                throw err;\n            }\n            server.start(function () {\n\n                console.log('Hapi days!');\n            });\n        });\n    });\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/glue/issues"
  },
  "_id": "glue@2.3.0",
  "_from": "glue@~2.3.0"
}
