{
  "name": "yar",
  "description": "Cookie jar plugin for Hapi",
  "version": "4.2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/yar"
  },
  "main": "lib/index",
  "keywords": [
    "hapi",
    "plugin",
    "cookies",
    "jar",
    "session"
  ],
  "engines": {
    "node": ">=0.10.40"
  },
  "dependencies": {
    "hoek": "2.x.x",
    "node-uuid": "1.4.x",
    "statehood": "2.x.x"
  },
  "devDependencies": {
    "boom": "2.x.x",
    "code": "1.x.x",
    "hapi": "9.x.x",
    "lab": "5.x.x"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "license": "BSD-3-Clause",
  "readme": "![yar Logo](https://raw.github.com/hapijs/yar/master/images/yar.png)\n\nA [**hapi**](https://github.com/hapijs/hapi) session plugin and cookie jar\n\n[![Build Status](https://secure.travis-ci.org/hapijs/yar.png)](http://travis-ci.org/hapijs/yar)\n\nLead Maintainer: [Mark Bradshaw](https://github.com/mark-bradshaw)\n\n## Install\n\n    $ npm install yar\n\n## Upgrading to 4.x\n\nPlease note that version 4.x has a small breaking change.  This probably doesn't affect most people, but it's worth noting.  In version 3.x if a cookie was invalid, either due to corruption or change in encryption password, the server would respond with a HTTP 400 error.  Starting in 4.x the default settings avoid this and instead silently drop the invalid cookie.  This is probably the desired behavior, but since it's different you should be aware of it when upgrading.\n\n\n## Usage\n\nThe ***yar*** [hapi](https://github.com/hapijs/hapi) plugin adds session support - a persistant state across multiple browser\nrequests using an [iron](https://github.com/hueniverse/iron) encrypted cookie and server-side storage. **yar** tries to fit\nsession data into a session cookie based  on a configured maximum size. If the content is too big to fit, it uses local storage\nvia the hapi plugin cache interface.\n\nFor example, the first handler sets a session key and the second gets it:\n```javascript\nvar handler1 = function (request, reply) {\n\n    request.session.set('example', { key: 'value' });\n    return reply();\n};\n\nvar handler2 = function (request, reply) {\n\n    var example = request.session.get('example');\n    reply(example.key);     // Will send back 'value'\n};\n```\n\nThe plugin requires a password for encryption:\n```javascript\nvar options = {\n    storeBlank: false,\n    cookieOptions: {\n        password: 'password',\n        isSecure: true\n    }\n};\n/*\nPlease note that there are other default cookie options that can impact your security.\nPlease look at the description of the cookie options below to make sure this is doing\nwhat you expect.\n*/\n\nvar server = new Hapi.Server();\n\nserver.register({\n    register: require('yar'),\n    options: options\n}, function (err) { });\n```\n\n## Cookie Options\n\nYou can read about more cookie options in the [Api](API.md).\n\n### isSecure\n\nSet `isSecure` (default `true`) to `false` if you are using standard http. Take care to do this in development mode only though. You don't want to use cookies sent over insecure channels for session management.  One way to take care of this is to use the `NODE_ENV` environment variable like this:\n\n```javascript\nvar options = {\n    cookieOptions: {\n        isSecure: process.env.NODE_ENV === 'development' ? false : true,\n        ...\n    }\n};\n```\n\n### ignoreErrors\n\n`ignoreErrors` (default `true`) tells Hapi that it should not respond with a HTTP 400 error if the session cookie cannot decrypt.  This could happen if the cookie is changed on the client, or more likely, if you change the cookie password in your settings.  If you want to make this condition send an error like it did in prior versions, change this to `false`, but be aware that if you change your cookie password you will cause 400 errors to be returned to end users.  In that case you should probably change this back to true for a short time to allow session cookies to get reset for the best user experience.\n\nYou may turn this off, `false`, and try to use the Hapi route state config option of `failAction` to instead get an event whenever a bad session cookie is encountered.  This can allow more sophisticated handling strategies or even allow for mitigation of brute force attacks on your cookie password.  See [server.state](http://hapijs.com/api#serverstatename-options) documentation for more details.\n\n### clearInvalid\n\n`clearInvalid` (default `true`) tells Hapi that if a session cookie is invalid for any reason, to clear it from the browser.  This prevents Hapi from having to reprocess the bad cookie on future requests.  In general you'll probably want this on, but if you'd prefer that session cookies be dealt with in some other way you may set this to `false`.\n\n## Hapi-Auth-Cookie\n\nThere's a similar project called [Hapi-Auth-Cookie](https://github.com/hapijs/hapi-auth-cookie) that achieves similar ends to *yar*.  If you want some additional options around authentication then you should take a look there.\n\n## API Reference\n\n[Api Reference](API.md)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/yar/issues"
  },
  "_id": "yar@4.2.0",
  "_from": "yar@~4.2.0"
}
